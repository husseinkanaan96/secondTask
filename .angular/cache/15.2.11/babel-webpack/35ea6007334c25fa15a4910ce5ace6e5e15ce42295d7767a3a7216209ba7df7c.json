{"ast":null,"code":"import _asyncToGenerator from \"D:/OneDrive Backup/OneDrive/Desktop/secondTask/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nexport class ReportService {\n  constructor() {\n    this.apiUrl = 'http://localhost:3000/api/report';\n  }\n  getReport(applicationNo) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const response = yield fetch(`${_this.apiUrl}/${applicationNo}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = yield response.json();\n        return data;\n      } catch (error) {\n        console.error('Error fetching report data:', error);\n        return [];\n      }\n    })();\n  }\n  static #_ = this.ɵfac = function ReportService_Factory(t) {\n    return new (t || ReportService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ReportService,\n    factory: ReportService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;AAKA,OAAM,MAAOA,aAAa;EAIxBC;IAFQ,WAAM,GAAG,kCAAkC;EAEnC;EAEVC,SAAS,CAACC,aAAqB;IAAA;IAAA;MACnC,IAAI;QACF,MAAMC,QAAQ,SAASC,KAAK,CAAC,GAAG,KAAI,CAACC,MAAM,IAAIH,aAAa,EAAE,CAAC;QAE/D,IAAI,CAACC,QAAQ,CAACG,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBJ,QAAQ,CAACK,MAAM,EAAE,CAAC;;QAG3D,MAAMC,IAAI,SAASN,QAAQ,CAACO,IAAI,EAAE;QAClC,OAAOD,IAAI;OACZ,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACnD,OAAO,EAAE;;IACV;EACH;EAAC;qBApBUZ,aAAa;EAAA;EAAA;WAAbA,aAAa;IAAAc,SAAbd,aAAa;IAAAe,YAFZ;EAAM","names":["ReportService","constructor","getReport","applicationNo","response","fetch","apiUrl","ok","Error","status","data","json","error","console","factory","providedIn"],"sourceRoot":"","sources":["D:\\OneDrive Backup\\OneDrive\\Desktop\\secondTask\\src\\app\\report.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ReportService {\n\n  private apiUrl = 'http://localhost:3000/api/report';\n\n  constructor() { }\n\n  async getReport(applicationNo: string): Promise<any[]> {\n    try {\n      const response = await fetch(`${this.apiUrl}/${applicationNo}`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error fetching report data:', error);\n      return [];\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}